OO的三大基本特征：
1.封装
  尽量地隐藏细节。
  属性要尽可能地私有化。
  仅供内部使用的方法要私有化(private)。
  仅供子类使用的方法要保护化(protected)

类的封装策略：
 a. 把属性、get/set方法和业务方法全部封装到同一个
    类中。
 b. 把属性、get/set方法封装到一个实体类中，而把
    操作此实体类对象的方法封装到一个业务类中。

2.继承
是一种类之间的关系，使用extends关键字.
继承的特点：
1.传递性
2.单重性
3.继承性

继承的条件： 满足 "IS A" 关系。

继承的好处：
直接让子类拥有父类的非私有方法，也就是所谓的
代码复用。
但是，目前的设计思路中，在不满足“IS A"的关系下，
不适合使用继承关系来做代码复用。

原因：
因为子类会暴露父类中的所有公开方法，即使是子类
中所不需要的方法。

比如：父类A中有10个公开方法，而类B 只想重用类A
中的其中5个，如果使用继承，则类B中会继承类A中的
所有10个方法，这样，就会暴露不需要的其中5个。

3.多态
相同编译时类型的对象在运行同一个方法时
会呈现出不同的形为，这个现象就是多态性。

JAVA语言是支持多态性的语句。

多态的条件：
1.继承关系
2.方法重写

--
重写的规范： @Override
1.方法名相同
2.参数列表相同
3.修饰符相同或子类比父类更宽
4.抛出的异常，子类只能比父类更小
5.返回类型，子类比父类更小。

--
知识大纲：
1. 静态(static)
2. final 关键字
3. 抽象类 (abstract)
4. 接口   (interface)

--
静态 static 
此关键字可以修饰
1.属性, 表示此属性是静态属性，也叫静态域
  静态属性区别于普通属性：
  它是类拥有的，所有对象共享的。
语法：
访问控制修饰符 static 数据类型 属性名;
如：
public class 类名{
   //普通属性
   private int i;
   //静态属性
   private static int index; //类变量

}

静态属性也叫 类变量，【与类同在】
普通属性也叫 成员变量，【与对象同在】
还有一个是 局部变量，【存在定义自己的大括号中】

--
什么的属性应该定义成 静态属性？
答：所有对象需要共享的属性。

--
案例：
统计一个类共创建了多少个对象。

public class CountObject{
   //属性
   private String name; //对象名
   private static int count;
   private int i; //记录对象创建顺序

   public CountObject(String name){
	this.name = name;
	count++;
	i = count;
   }

   public int getCount(){
	return count;
   }
}

--
2.静态方法
就是指使用 static修饰的方法.
静态方法的特点：
 1. 不需要通过对象来调用，直接通过类名来调用。
    如：类名.静态方法名(参数);
 2. 静态方法中不能直接访问非静态成员。
    可以直接调用静态成员。

解释：
静态成员都是在 类加载 的时候就全部初始化好的，
并存放在 永久区。而普通成员都是在对像创建时才
初始化的，他们的时机不同。
所以，静态成员中不能直接访问非静态成员，
而非静态成员中可以直接访问静态成员。

--
3. 静态代码块
就是指使用 static来修饰的代码块。
语法：
static {
  //代码块
}

特点：
  1.在 类加载时就被执行。
  2.只执行一次。

用途：
  1.一般适合用来加载大量的不变数据到内存中。
    如：系统基础数据
  2.适合用来创建一些耗时较长的可重复使用资源
    如：数据库连接池...

--
对象创建的完整过程：
类加载：[仅发生1次]
  a.给静态属性申请空间
  b.给静态属性赋初始值
  c.如果有静态代码块，则执行静态代码块.

创建对象：[每创建一个对象，就发生1次]
  按如下4步递归地创建父类对象
  a.给非静态属性申请空间
  b.给非静态属性赋初始值
  c.如果有普通代码块，则调用普通代码块
  d.调用相应的构造方法.

--
final 关键字
可以修饰：
1.局部变量, 使得局部变量成为 常量
如：
final int INDEX  = 10; 

2.属性, 使用属性变量常量属性
如：
public class 类名{

   private final int I = 5; //常量属性
   //或：
   public static final int I = 5;
}

3. final 类，表示这个类不能被继承，是最终类。
   如：java.lang.String类就是一个 final类，
   不能被继承。

4. final 方法，表示这个方法不能被重写。

注：
使用 final修饰的变量、属性、方法、类，JVM都会
做一定的优化。

--
设计模式(Design Pattern)
是一种编程思想体现，也是一种编程的”套路“。
是由经验丰富的前辈总结出来的适应于某种特定
场景下的思想。

它与开发语言没有关系的，用任何的开发语言都可以实现。

常见的设计模式有：
单例模式(singleton), 简单工厂模式(factory)
,模板模式(template), 回调(callback), MVC, ...

--
单例模式(Singleton)
目的：保证某个类的实例在整个软件中只能是唯一的
场景：在需要保证类的实例是唯一的情形下。
实现原理：
1.构造方法私有化。
2.提供一个静态属性来保存本类的唯一实例。
3.提供一个公开静态方法，来获取本类的唯一实例
Code:
public class Singleton{
  //静态属性
  private static Singleton instance 
			= new Singleton();
  //为了保证不让外界能自由地创建对象，使得
  //构造方法私有化
  private Singleton(){
  }
  public static Singleton getInstance(){
	return instance;
  }
}






 




