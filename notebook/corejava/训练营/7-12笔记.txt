回顾：
1.数据类型
  基本类型，
  byte,short,int,long,boolean,char,float,double
  对象类型

2.变量、常量、字面量
  变量的定义语法：
  数据类型 变量名 [=初始值];

  常量的定义语法：
  final 数据类型 常量名 = 初始值;

3.进制
  
4.运算符
  a.赋值运算符 =
  b.算术运算符
  c.逻辑运算符  &&, ||, !
  d.比较运算符  >, <, ==, >=, <=, !=
  e.位运算符    &，|，^, ~, >>, <<, >>>
  f.成员访问运算符 .
  g.创建对象\申请堆空间\实例化运算符 new
  h.三目运算符  ? : [完成非此即彼的判断]
  语法：
  条件表达式1 ? 表达式2 ：表达式3;

  当条件表达式1成立时，返回表达式2，
  否则，返回表达式3

如：
  boolean b = ((i & 1) == 0);

  String str = (i & 1) == 0 ? "偶数" : "奇数";

-- 
运算符的优先级
使用小括号来确定/改变 优先级。

5.表达式
  
--
注意点：
给变量赋值的情形：
1. 使用字面量直接赋值 [针对基本类型]
   int i = 10;
   double d = 4.52;
2. 使用表达式给变量赋值
   boolean b = ((i & 1) == 0);
   int k = i*3 + 100; 

3. 使用方法调用来给变量赋值
   String str = Integer.toBinaryString(i);
   再如：
   Scanner scan = new Scanner(System.in);
   int input = scan.nextInt();
--
一切从变量开始

--
1.条件判断语句 if 
2.分支语句 switch
3.循环
  for
  while
  do while
4.continue与break 语句

--
一、if语句
if(条件表达式1){
   //代码1
}

如果条件表达式1成立，则执行代码1，否则，不执行。

if(条件表达式1){
   //代码1
}eles{
   //代码2
}
如果条件表达式1成立，则执行代码1，
否则，执行代码2;

if(条件表达式1){
   //代码1
}eles if(条件表达式2){
   //代码2
}else if(条件表达式3){
   //代码3
}else{
   //...
}

--
if语句练习：
设计一个程序，输出今天是星期几.
Calendar rightNow = Calendar.getInstance();
//获取星期几,得到的是 0~6之间的整数
int week = rightNow.get(Calendar.DAY_OF_WEEK);
if(week == 0){
	
} else if(week == 1) {
	
}

--
二、分支语句
语法：
switch(变量因子){
   case 值1:
	//代码块
	[break;]
   case 值2:
	//代码块
	[break;]
   ...
   case 值n:
	//代码块
	[break;]
   [default:]
	//代码块
	[break;]
}
注意点：
switch中，变量因子的数据类型只能是：
byte, char, int, short, 枚举, 字符串(jdk7.0支持)

--
练习：
设计一个程序，提示用户输入月份，然后，打印出
这个月多少天. [不考虑闰年]

--
三、for循环
语法：
for(表达式1;表达式2;表达式3){
    //循环体
}
注：
表达式1 代表初始化语句，只执行一次。
表达式2 代表循环的条件判断，每循环1次，执行1次。
	条件成立，继续循环，否则，退出循环
表达式3 代表变量因子的变化语句，每循1次，执行1
	次。
以上三个表达式都可以省略。
如：
for(;;){  //代表 死循环
    //循环体
}

如：循环10次;
for(int i=0;i<10;i++){
   //循环体
   System.out.println("i="+i);
}
或：
int i=0;
for(;i<10;i++){
   //循环体
   System.out.println("i="+i);
}
或
int i=0;
for(;i<10;){
   //循环体
   System.out.println("i="+i);
   i++;
}
--
for循环一般用在确定循环次数的情形下。

//采用循环输出26个小写字母

-----------------------------------------------
--备注：
-- byte,char, short 与int型做运算时，结果一定
-- 是int型。
-- 换句话说：byte\char\short\int 两两运算时，结果
-- 一定是int
如：
char c = 'a';
c = c+1; //compile error
c += 1; //ok
c++; //ok

byte b = 100;
b = b+20; //compile error
//除非做强制类型转换
b = (byte)(b+20); //ok

结论：小范围类型可以自动隐式类型转换成大范围类型
而大范围类型必需要强制类型转换成小类型。
如：
byte b2 = 90;
int i2 = b2; //ok
byte b3 = i2; //compile error
byte b4 = (byte)i2; //ok
-----------------------------------------------
基本类型范围示意图：
byte -> char -> short -> int -> long
			  |
			 float -> double
--
循环可以嵌套
利用循环的嵌套输出一个9*9的乘法表
如下：
1*1=1
2*1=2 2*2=4
...
9*1=9 9*2=18 9*3=27 .... 9*9=81

--
四、while 循环
语法：
while(条件表达式){
    //循环体
}
注：当条件表达式成立时，就执行循环体。

同样地，使用while循环10次
int i = 0;
while(i < 10){
    //循环体
    System.out.println("i="+i);
    i++;
}

while循环一般用在不确定循环次数的场景中。
如:
while(true){
   ...
   if(条件表达式){
	break; //打破循环,退出循环
   }
}

--
获取随机数
java.util.Random 这个类可以产生随机数
//首先，创建Random对象
Random ran = new Random();
//如果要生成[1,100]之间的随机数
int i = ran.nextInt(100)+1;

--
设计一个程序，循环产生1~100的随机数，只有当
生成的随机数为50时，才退出循环。
并且输出多少次才生成50.

五、do while循环
语法：
do {
   //循环体

} while(条件表达式);
注：do while是一个前置循环，它是先执行循环体，
再做条件判断的。
所以，不管do while中的循环条件是否成立，至少会
执行一次循环体。

一般也是在不确定循环次数的情况下使用。

如：

--
作业：
1.设计一个程序，提示用户输入任意整数[<30]，然后，
输出这个整数的阶乘。
如：
5!=120

2.看如下数字，找出规则，并用代码打印出来
1*1=1
11*11=121
111*111=12321
....
111111111*111111111=12345678987654321

3.猜数字游戏







