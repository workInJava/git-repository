JAVA开发的集成开发环境(IDE)介绍
--
1. Eclipse, 最新版本名 juno, 内核版本4.2.
   是一个非常优秀的IDE，使用最广。

2. MyEclipse 基于Eclipse扩展而来的一个优秀的IDE,
   它整合了很多常用的框架、类库，比如：JAVA WEB开发
   、WEB SERVICE、SSH框架 ...
   所以，MyEclipse比会大一点。
   最新的版本 MyEclipse2013
   它的版本：6.0, 6.5, 7.0,8.5,9.0,10.0, 10.7, 2013

3. IDEA 很是强大的一款JAVA开发工具。

4. NetBeans 由SUN公司开发的，开源、免费的。

5. JBuilder 2006 较适合用来开发EJB程序.

...

--
Eclipse的基本配置
1.配置工作区(workspace)的编码
  Windows -> Perferences -> General -> workspace

2.配置JRE
  一般MyEclipse中内置的JRE版本都较低，需要开发者
  重新配置。
  Windows -> Perferences -> java -> Installed JREs

3.修改编译器版本
  由于MyEclipse默认采用的编译器版本过低，而我们
  需要编译器版本与JRE版本保持一致。
  Windows -> Perferences -> java -> compiler

--

Eclipse常用快捷键.
CTRL + M  最大化/最小化 工作区
CTRL + S  保存当前编辑的文件

ALT + /   智能提示
CTRL + ALT + 下箭头  复制
ALT + 下箭头  向下移动代码
ALT + 上箭头  向上移动代码
CTRL + D      删除选定的行/光标所在的行
CTRL + Z      撤消上一步操作

CTRL + L      定位到指定的行
CTRL + O      调出类的大纲

CTRL + SHIFT + T 查找项目中的指定类，并打开它
CTRL + SHIFT + H 查找指定类的层次结构.

--
类的定义：
//part1,
//包的定义: 一般以公司域名倒置，
//如：com.ibm.xxx.xxx;
package com.corejava.day01;

//part2
//导入语句:导入与本类不在同一个包下的类
//除非这个类是来自于 java.lang包 

import 包名.类名;

注：类名可以使用 * 号代替，它是通配符
如：导入 java.util包下的所有类：
import java.util.*;
注：* 只能通配类名，不能通配子包名。
如：import java.lang.ref.*;

//part3
//类的定义
public class 类名{
   //程序入口方法，由JVM来调用
   public static void main(String[] args){
	//....
   }
}

--
类名的命名:
要求首字母大写，如果有多个单词组，则每个单词的
首字母都应该大写。

--
java的关键字和保留字

--
JVM 是如何来加载一个类到 内存中的？
了解JAVA类加载的体系结构

引导类加载器   --负责加载%JAVA_HOME%\jre\lib
    |
扩展类加载器   --负责加载%JAVA_HOME%\jre\lib\ext
    |
应用类加载器   --负责加载我们要运行的类
    |
自定义类加载器 --一些特殊情况下的类加载。

这四层类加载器，都是有继承关系的。

当我们运行一个类的时候，首先，由应用类加载器负
责加载，它通过-classpath选项指定的路径下去搜索，
在代码中，如有遇到JRE中的类库或扩展类库时，则
会委托上层类加载器去加载。

1.我们的代码总是会使用JRE自带的一些类库，比如：
  java.lang.String, java.lang.System,...
  请问，JVM又是如何去搜索这些类的？ 【去哪里找？】

  实际上，每次运行类时，JVM总会先加载本类所需的
  JRE中的类库，它会去 %JAVA_HOME%\jre\lib 目录下搜索。
  比如：最核心的文件 rt.jar

  JDK中，也会提供一些第三方的类库，有时候，我们
  的代码中也会用到这些第三方类库，就需要在：
  %JAVA_HOME%\jre\lib\ext 中搜索

--
2.了解JVM启动后的一些配置信息
  通过 
  System.getenv();方法来获取

--
1.数据类型
  2类：
  基本类型， 8种
  byte	    1字节     -128~127  
  short	    2字节     -32768~32767
  int	    4字节     -2147483648~2147483647
  long	    8字节     ...
  boolean   1字节     true或false
  char      2字节     
  float     4字节     
  double    8字节

  对象类型
  内置对象类型，如：String,System, Random,...
  自定义对象类型，如：HelloWorld,JVMInfo, ...
  
2. 变量
语法：
数据类型 变量名 [=初始值];

注：任何的变量，在使用之前都必需初始化。

如：定义如下几个变量
int i;
int j = 20;

局部变量(local variable)
是指定义在方法体内部的变量，含形参。
它的生命周期只在它所在的一对大括号中有效。

--
类型转换
1.隐式类型转换
  是指由低精度类型自动向高精度类型转换。
  如：
  int  i = 100;
  long a = i;  //合法.

  char c = 'a';
  i = c;  //合法

2.强制类型转换
  是指在不能隐式转换时，需要通过特殊的语法来
  告诉JVM，我要做类型转换
  如：
  int i = 97;
  char c = i; //error, 有可能丢损精度
  char c = (char)i; //合法，因为做了强制类型转换
--
字符的特殊表示法：
字符使用 单引号 括起来。
如：'a', 't'

采用unicode来表示字符，如：
'\u0009'  等价于 '\t'

---------------------------------
注释(comment)
三种注释方式：
1.单行注释，采用 // 来表示
2.多行注释，采用 /* */ 来表示
3.文档注释，采用 /** */ 来表示

文档注释可以用在4个地方：
a.注释类
b.注释属性
c.注释方法
d.注释文件【类文件，写在package的上面】

文档注释的作用不仅仅是给程序员看，有了它，我们
可以利用 javadoc 命令生成API文档。

文档注释支持HTML标记。
也支持一些JDK内置标记，如：
@since 代表 从以下版本开始
@see   代表 另请参见
@author 代表 作者
@version 代表版本
...
@param 代表方法的参数
@return 代表 返回
@throws 代表 抛出的异常
...

--
运算符
逻辑运算符
&& 逻辑与
|| 逻辑或
!  逻辑非

&&和|| 都是“短路运算符”，也就是指如果表达式的
左边能够确定整个表达式的结果，则右边不执行。

如:
boolean x = true;
boolean y = true;
int a = 10, b = 20, c = 5, d = 1;
if((x = a > b) && (y = c < d)){
    ...
}
x = ?, y = ?

如果改成：
if((x = a > b) & (y = c < d)){ //按位与，非短路
    ...
}
x = ?, y = ?

--
for循环
语法：
for(表达式1;表达式2;表达式3){
   //循环体
}

注：表达式1、表达式2、表达式3都可以省略。但是
;号不能省。

表达式1是初始化语句，只能执行1次
表达式2是条件判断语句，执行多次
表达式3是变量因子变化语句，执行多次。

如:循环10次：
for(int i=0;i<10;i++){
   System.out.println(i);
}
//循环迭代数组元素
int[] arr = {10,1,23,2342,232324,1,12};
for(int i=0;i<arr.length;i++){
	System.out.println(arr[i]);
}

--
增强for循环,
是在JDK5.0版本之后才有的，目的是为了加强迭代
数组以及集合元素。

语法：
for(元素类型 变量名 : 数组/集合){
    //循环体 [变量名中存了元素值]
}

如：
int[] arr = {10,1,23,2342,232324,1,12};
for(int i : arr){
   System.out.println(i);
}

---

