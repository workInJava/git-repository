数据库的设计:
软件的开发流程:
立项-->
    需求分析-->
	概要设计--> [含数据库设计]
	    详细设计-->
		实现-->
		    测试-->
			交付-->
			    维护-->
通过需求分析:抽取出关键业务中的"实体类":这些实体类都
是承载数据,这些数据最终都要存放到数据库中去;
映射(mapping) :
实体类名         映射成为 表名
实体类的属性     映射成为 列名
对象标识         映射成为 主键
实体类之间的关系 映射成   外键

	实体类			表  
名字	User		表名tbl_user
属性	userName	列名userName
属性	password	列名password
属性	id		主键id

实体类之间的关系:
一对一  映射成外键 
一对多  映射成外键
多对多	映射成外键  拆分成2个一对多 
自关联  映射成外键

数据库的设计的原则:也叫范式:
三大范式:
1.不存在可以再分割的列,列式具有原子性;

2.在满足第一范式的基础上,不存在任何非关键列
部分依赖于关键列

3.在满足第二范式的基础上,不能出现非关键列通过
传递依赖于关键列;
R(id,sNo,sname,university,uAddress,uPhone)

---------------------------------------------
DDL(create drop alter rename to)
创建表格的语法:
create tebl tbl_name(
	列名 列的数据类型 [defuault] 约束,
	.
	.
	.
);

创建表格:
create table tbl_user(
	id number(4) primary key,
	userName varchar2(20),
	password char(6),
	age number(3),
	birth Date
);


删除表格:drop table 表名;

约束:(constraint):作用:用来进一步的限制表中列的数据有效性
以保证添加到此列中的数据都是符合业务需求的,为不会
出现无效的数据;

oracle数据库中有5中约束:
1.primary key (主键约束)  含义: 非空唯一
2.not null (非空约束) 含义:非空
3.unique(唯一约束)    含义:唯一
4.check(自定义约束)	含义:自定义
5.foreign key(外键约束) 含义:此列的值是
				引用自其他表的主键

create table tbl_user(
	id number(4) primary key,
	userName varchar2(20) not null unique,
	password char(6) not null,
	age number(3) check(age >= 1),
	birth Date
);

如上是添加列级约束语法:
如下是添加表级约束语法:
create table tbl_user(
	id number(4),
	userName varchar2(20) not null,
	password char(6) not null,
	age number(3),
	birth Date,
	primary key(id),
	unique(userName),
	check(age >= 1)
);
注:如果添加not null 约束  只支持列级语法 
				表级语法不支持
create table tbl_order(
	id number(4),
	orderNo char(15) not null,
	createDate Date not null,
	desci varchar2(100),
	user_id number(4),   //外键约束如果使用列级语法则 references tbl_user(id)
	primary key(id),
	foreign key(user_id) references tbl_user(id) 
);

注:如果我们没有指定约束名,则系统自动会生成一个约束名
如果我们指定约束名,则系统使用我们的约束名
*一般命名约束名的规则:tbl_name_列名_约束名缩写;
create table tbl_user(
	id number(4),
	userName varchar2(20) 
		constraint tbl_user_userName_nn not null,
	password char(6) 
		constraint tbl_user_password_nn not null,
	age number(3),
	birth Date,
	constraint tbl_user_id_pk primary key(id),
	constraint tbl_user_userName_uq unique(userName),
	constraint tbl_user_age_ck check(age >= 1)
);


修改表结构:
Alter
对于修改表结构来说:共有8条子命令,其中4条
是和列相关的,还有4条是和约束有关:
--列相关的:
1.添加列:
alter table 表名 add (列名 类型 default '' 约束)

2.修改列(不是该列名,修改的是数据类型和约束)
alter table 表名 modify(列名 新类型 default '' 新约束)

3.修改列名:
alter table 表名 rename column 列名 to 新列名;

4.删除列
alter table 表名 drop column 列名;



<----------------------未看----------------------->
--约束相关:
1.添加约束:
alter table table_name
add [constraint constraint_name] 约束类型(列名);

2.删除约束:
alter table table_name
drop constraint constraint_name;

3.使约束失效
alter table table_name
disable constraint constraint_name;

4.使约束生效:
alter table table_name
enable constraint constraint_name;

<----------------------结束----------------------->









-----------------------------------------
DML  insert  update delete


1.插入数据:
insert into tbl_user(id,userName,password,age,birth) 
		values(1,'tom','123456',30,to_date('1986-04-13','yyyy-mm-dd'));

insert into tbl_user values(3,'jack','123456',3,to_date('1986-04-13','yyyy-mm-dd'));

2.更新数据
update tbl_user set userName = 'HMM' where id = 1;

3.删除数据:
delete tbl_user where id = 1;



-------------------------------------------------
数据字典:
定义:数据字典就是用来描述用户对象的对象;
table  constraint  user  对于数据来说都是对象
oracle是一个用表(系统表)来维护表(用户表)的数据库系统;
我们称为这个系统表就是我们的数据字典;

oracle数据库定义数据字典(系统表)也遵守一定命名规范
它有内置的上千张表组成;
命名规则:
前缀_数据库对象+s|es;
常用的前缀:
user
all
dba
$
常用的数据对象:
table user constraint   sequence index  view ...

user_tables;
user_users;
user_constraints;
user_sequences
user_indexes;
user_views;

select table_name from user_tables;
查询出TBL_USER表中所有的约束名和约束类型;

select constraint_name,constraint_type from
user_constraints where table_name = 'TBL_USER';



<---------------------未看---------------------->
-------------------------------------------------
DTL   数据库的事务:
数据库的事务(transaction)处理:
事务的定义:就是只一组相关的相关的sql操作
作用:用来保证数据的平稳性和可预测性的技术

事务的四大特性(ACID):
atomic:原子性:指的是事务不可再分割,
		要么一起成功,要么一起失败;
consistency:一致性:指的是事务一旦结束,
	内存占用的数据要和磁盘中的数据保持一致
isolation:隔离性:指的是事务之间互不干扰
duration:持久性,指的是事务一旦提交(commit),
				则数据持久化到磁盘中

目前所有的主流数据库都支持事务;
oracle当然也支持,而且实现得很好;

oracle的所有操作都处在事务当中.\
一个事务结束,就是下一个事务的开始;

在oracle中,操作事务的命令
commit  rollback   savepoint



DDL 语句会自动提交事务(自动commit); create ,alter ,drop ,rename to
DML 语句不会自动提交事务   insert ,delete ,update 需要commit
	需要你去手动提交事务或回退事务

-----
一个事务是不能读到其他没有提交的事务中的数据
-----
脏读(dirty read) 就是值一个事务读到了其
		他事务未提交的数据	

-----
多事务并发处理机制:
原因:因为多个事务同时操作一个表中的相同行的时候,
由于并发问题而产生.如果不做并发处理;可能回造成数据的不一致

oracle中采用'锁'来做并发处理:
1.表级排它锁(X) eXclusive mode
2.表级共享锁(S) Share mode
3.表中行级排他(SRX) Share eXclusive mode

4.行级共享(RS) Row Share
5.行级排它(RX) Row eXclusive

注:上面3种锁   是专门通过命令来申请的
语法:
	lock table tbl_name in * mode;
是处理数据幻读错误:

后两种锁:无需通过专门的命令申请,
		是通过DML或select自动申请的;
所有的select语句 默认情况下自动申请rs锁;
所有的DML语句默认情况下自动申请RX锁;
[每一个行记录都有唯一的RX锁];

并发机制:
当事务中的sql命令为DML语句时,会申请此语句所涉及
的行记录的RX锁,如果申请失败,就会等待,直到其他事务把
RX锁给归还回来,也就是其他事务的结束;


一个事务完成自己的业务后,要尽快的结束事务
因为活动的事务越多,系统的效率就越低

查询语句通过for update 也可以申请RX锁


select * from tbl_user for update nowait|wait 10;

能处理数据不可重复读取错误;
----------------------------------------------
1.序列(sequence)  user_sequences
作用:用来生成唯一的主键:
语法:create sequence sequence_name
	[start with n] --从第几开始计数
	[increment by m]--没计数一次增加多少
其中有两个重要的属性;
nextval: 取序列的下一个值
currval: 取序列的当前值;

create sequence tbl_user_seq;
insert into tbl_user values(tbl_user_seq.nextval,'jack','123465',30,sysdate);

create sequence test_seq start with 100001 increment by 5;

删除序列
drop sequence sequence_name;
----

----------------------------------
索引(index)
是一个比较重要的数据库对象;它的作用就是可以
有效的提高查询的效率;

创建索引的方式有2种:
第一种方式:自动创建索引:
	当表中列添加了主键约束或者唯一性约束的
	时候,则系统会自动为此列创建唯一性约束,索引的
	名字就是约束名;
第二种方式:手动创建:
	语法:
	create index index_name
	on table_name(column_name,...);
注:索引有自己独立的存贮空间和命名空间,
所有可以与约束名相同,但是创建索引也会相应牺牲一些
数据库的性能

默认情况下:索引采用的BTREE(二叉树)的数据结构

索引的原理:
1.伪列(rowid)
存放的是数据行记录的真正的"物理地址";
select rowid,first_name,salary from s_emp;
select first_name,salary from s_emp where rowid = 'AAAFLrAABAAALH5AAA';

索引的建立原理:
把创建索引的列值与rowid合成一个键值对,这个键值对就是索引
然后把它们存放在指定的数据结构(BTREE)中并且是
独立的索引空间:

索引的查询原理:
当我们的查询语句的where条件中列,如果这个列建立了
索引,则次查询会分为2步:
	第一步:先查索引,在句列中的值直接找到rowid;
	第二步:根据第一步得到的rowid直接定位到行记录,完成查询

建立索引的策略:
1.主键和唯一性列适合建立索引;
2.不经常发生改变的列  适合;
3.满足以上2个条件的前提后,经常作为
				查询条件的列适合
4.重复值太多的列,  不适合
5.null值太多的列,  不适合

删除索引
drop index index_name;
数据字典
user_indexes

视图view:




<--------------------结束--------------------->